<!DOCTYPE html>
<!-- saved from url=(0105)file:///C:/Users/d.malonas/Downloads/bootcamp_jul_2025/part_2/day-1/geometries/procedural_auto_gen_2.html -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <title>Procedural Geometry — Recenter @ Mouse (G)</title>
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <style>.lil-gui {
  font-family: var(--font-family);
  font-size: var(--font-size);
  line-height: 1;
  font-weight: normal;
  font-style: normal;
  text-align: left;
  color: var(--text-color);
  user-select: none;
  -webkit-user-select: none;
  touch-action: manipulation;
  --background-color: #1f1f1f;
  --text-color: #ebebeb;
  --title-background-color: #111111;
  --title-text-color: #ebebeb;
  --widget-color: #424242;
  --hover-color: #4f4f4f;
  --focus-color: #595959;
  --number-color: #2cc9ff;
  --string-color: #a2db3c;
  --font-size: 11px;
  --input-font-size: 11px;
  --font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Arial, sans-serif;
  --font-family-mono: Menlo, Monaco, Consolas, "Droid Sans Mono", monospace;
  --padding: 4px;
  --spacing: 4px;
  --widget-height: 20px;
  --title-height: calc(var(--widget-height) + var(--spacing) * 1.25);
  --name-width: 45%;
  --slider-knob-width: 2px;
  --slider-input-width: 27%;
  --color-input-width: 27%;
  --slider-input-min-width: 45px;
  --color-input-min-width: 45px;
  --folder-indent: 7px;
  --widget-padding: 0 0 0 3px;
  --widget-border-radius: 2px;
  --checkbox-size: calc(0.75 * var(--widget-height));
  --scrollbar-width: 5px;
}
.lil-gui, .lil-gui * {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}
.lil-gui.root {
  width: var(--width, 245px);
  display: flex;
  flex-direction: column;
  background: var(--background-color);
}
.lil-gui.root > .title {
  background: var(--title-background-color);
  color: var(--title-text-color);
}
.lil-gui.root > .children {
  overflow-x: hidden;
  overflow-y: auto;
}
.lil-gui.root > .children::-webkit-scrollbar {
  width: var(--scrollbar-width);
  height: var(--scrollbar-width);
  background: var(--background-color);
}
.lil-gui.root > .children::-webkit-scrollbar-thumb {
  border-radius: var(--scrollbar-width);
  background: var(--focus-color);
}
@media (pointer: coarse) {
  .lil-gui.allow-touch-styles, .lil-gui.allow-touch-styles .lil-gui {
    --widget-height: 28px;
    --padding: 6px;
    --spacing: 6px;
    --font-size: 13px;
    --input-font-size: 16px;
    --folder-indent: 10px;
    --scrollbar-width: 7px;
    --slider-input-min-width: 50px;
    --color-input-min-width: 65px;
  }
}
.lil-gui.force-touch-styles, .lil-gui.force-touch-styles .lil-gui {
  --widget-height: 28px;
  --padding: 6px;
  --spacing: 6px;
  --font-size: 13px;
  --input-font-size: 16px;
  --folder-indent: 10px;
  --scrollbar-width: 7px;
  --slider-input-min-width: 50px;
  --color-input-min-width: 65px;
}
.lil-gui.autoPlace {
  max-height: 100%;
  position: fixed;
  top: 0;
  right: 15px;
  z-index: 1001;
}

.lil-gui .controller {
  display: flex;
  align-items: center;
  padding: 0 var(--padding);
  margin: var(--spacing) 0;
}
.lil-gui .controller.disabled {
  opacity: 0.5;
}
.lil-gui .controller.disabled, .lil-gui .controller.disabled * {
  pointer-events: none !important;
}
.lil-gui .controller > .name {
  min-width: var(--name-width);
  flex-shrink: 0;
  white-space: pre;
  padding-right: var(--spacing);
  line-height: var(--widget-height);
}
.lil-gui .controller .widget {
  position: relative;
  display: flex;
  align-items: center;
  width: 100%;
  min-height: var(--widget-height);
}
.lil-gui .controller.string input {
  color: var(--string-color);
}
.lil-gui .controller.boolean {
  cursor: pointer;
}
.lil-gui .controller.color .display {
  width: 100%;
  height: var(--widget-height);
  border-radius: var(--widget-border-radius);
  position: relative;
}
@media (hover: hover) {
  .lil-gui .controller.color .display:hover:before {
    content: " ";
    display: block;
    position: absolute;
    border-radius: var(--widget-border-radius);
    border: 1px solid #fff9;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
  }
}
.lil-gui .controller.color input[type=color] {
  opacity: 0;
  width: 100%;
  height: 100%;
  cursor: pointer;
}
.lil-gui .controller.color input[type=text] {
  margin-left: var(--spacing);
  font-family: var(--font-family-mono);
  min-width: var(--color-input-min-width);
  width: var(--color-input-width);
  flex-shrink: 0;
}
.lil-gui .controller.option select {
  opacity: 0;
  position: absolute;
  width: 100%;
  max-width: 100%;
}
.lil-gui .controller.option .display {
  position: relative;
  pointer-events: none;
  border-radius: var(--widget-border-radius);
  height: var(--widget-height);
  line-height: var(--widget-height);
  max-width: 100%;
  overflow: hidden;
  word-break: break-all;
  padding-left: 0.55em;
  padding-right: 1.75em;
  background: var(--widget-color);
}
@media (hover: hover) {
  .lil-gui .controller.option .display.focus {
    background: var(--focus-color);
  }
}
.lil-gui .controller.option .display.active {
  background: var(--focus-color);
}
.lil-gui .controller.option .display:after {
  font-family: "lil-gui";
  content: "↕";
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  padding-right: 0.375em;
}
.lil-gui .controller.option .widget,
.lil-gui .controller.option select {
  cursor: pointer;
}
@media (hover: hover) {
  .lil-gui .controller.option .widget:hover .display {
    background: var(--hover-color);
  }
}
.lil-gui .controller.number input {
  color: var(--number-color);
}
.lil-gui .controller.number.hasSlider input {
  margin-left: var(--spacing);
  width: var(--slider-input-width);
  min-width: var(--slider-input-min-width);
  flex-shrink: 0;
}
.lil-gui .controller.number .slider {
  width: 100%;
  height: var(--widget-height);
  background: var(--widget-color);
  border-radius: var(--widget-border-radius);
  padding-right: var(--slider-knob-width);
  overflow: hidden;
  cursor: ew-resize;
  touch-action: pan-y;
}
@media (hover: hover) {
  .lil-gui .controller.number .slider:hover {
    background: var(--hover-color);
  }
}
.lil-gui .controller.number .slider.active {
  background: var(--focus-color);
}
.lil-gui .controller.number .slider.active .fill {
  opacity: 0.95;
}
.lil-gui .controller.number .fill {
  height: 100%;
  border-right: var(--slider-knob-width) solid var(--number-color);
  box-sizing: content-box;
}

.lil-gui-dragging .lil-gui {
  --hover-color: var(--widget-color);
}
.lil-gui-dragging * {
  cursor: ew-resize !important;
}

.lil-gui-dragging.lil-gui-vertical * {
  cursor: ns-resize !important;
}

.lil-gui .title {
  height: var(--title-height);
  line-height: calc(var(--title-height) - 4px);
  font-weight: 600;
  padding: 0 var(--padding);
  -webkit-tap-highlight-color: transparent;
  cursor: pointer;
  outline: none;
  text-decoration-skip: objects;
}
.lil-gui .title:before {
  font-family: "lil-gui";
  content: "▾";
  padding-right: 2px;
  display: inline-block;
}
.lil-gui .title:active {
  background: var(--title-background-color);
  opacity: 0.75;
}
@media (hover: hover) {
  body:not(.lil-gui-dragging) .lil-gui .title:hover {
    background: var(--title-background-color);
    opacity: 0.85;
  }
  .lil-gui .title:focus {
    text-decoration: underline var(--focus-color);
  }
}
.lil-gui.root > .title:focus {
  text-decoration: none !important;
}
.lil-gui.closed > .title:before {
  content: "▸";
}
.lil-gui.closed > .children {
  transform: translateY(-7px);
  opacity: 0;
}
.lil-gui.closed:not(.transition) > .children {
  display: none;
}
.lil-gui.transition > .children {
  transition-duration: 300ms;
  transition-property: height, opacity, transform;
  transition-timing-function: cubic-bezier(0.2, 0.6, 0.35, 1);
  overflow: hidden;
  pointer-events: none;
}
.lil-gui .children:empty:before {
  content: "Empty";
  padding: 0 var(--padding);
  margin: var(--spacing) 0;
  display: block;
  height: var(--widget-height);
  font-style: italic;
  line-height: var(--widget-height);
  opacity: 0.5;
}
.lil-gui.root > .children > .lil-gui > .title {
  border: 0 solid var(--widget-color);
  border-width: 1px 0;
  transition: border-color 300ms;
}
.lil-gui.root > .children > .lil-gui.closed > .title {
  border-bottom-color: transparent;
}
.lil-gui + .controller {
  border-top: 1px solid var(--widget-color);
  margin-top: 0;
  padding-top: var(--spacing);
}
.lil-gui .lil-gui .lil-gui > .title {
  border: none;
}
.lil-gui .lil-gui .lil-gui > .children {
  border: none;
  margin-left: var(--folder-indent);
  border-left: 2px solid var(--widget-color);
}
.lil-gui .lil-gui .controller {
  border: none;
}

.lil-gui label, .lil-gui input, .lil-gui button {
  -webkit-tap-highlight-color: transparent;
}
.lil-gui input {
  border: 0;
  outline: none;
  font-family: var(--font-family);
  font-size: var(--input-font-size);
  border-radius: var(--widget-border-radius);
  height: var(--widget-height);
  background: var(--widget-color);
  color: var(--text-color);
  width: 100%;
}
@media (hover: hover) {
  .lil-gui input:hover {
    background: var(--hover-color);
  }
  .lil-gui input:active {
    background: var(--focus-color);
  }
}
.lil-gui input:disabled {
  opacity: 1;
}
.lil-gui input[type=text],
.lil-gui input[type=number] {
  padding: var(--widget-padding);
  -moz-appearance: textfield;
}
.lil-gui input[type=text]:focus,
.lil-gui input[type=number]:focus {
  background: var(--focus-color);
}
.lil-gui input[type=checkbox] {
  appearance: none;
  width: var(--checkbox-size);
  height: var(--checkbox-size);
  border-radius: var(--widget-border-radius);
  text-align: center;
  cursor: pointer;
}
.lil-gui input[type=checkbox]:checked:before {
  font-family: "lil-gui";
  content: "✓";
  font-size: var(--checkbox-size);
  line-height: var(--checkbox-size);
}
@media (hover: hover) {
  .lil-gui input[type=checkbox]:focus {
    box-shadow: inset 0 0 0 1px var(--focus-color);
  }
}
.lil-gui button {
  outline: none;
  cursor: pointer;
  font-family: var(--font-family);
  font-size: var(--font-size);
  color: var(--text-color);
  width: 100%;
  height: var(--widget-height);
  text-transform: none;
  background: var(--widget-color);
  border-radius: var(--widget-border-radius);
  border: none;
}
@media (hover: hover) {
  .lil-gui button:hover {
    background: var(--hover-color);
  }
  .lil-gui button:focus {
    box-shadow: inset 0 0 0 1px var(--focus-color);
  }
}
.lil-gui button:active {
  background: var(--focus-color);
}

@font-face {
  font-family: "lil-gui";
  src: url("data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAAUsAAsAAAAACJwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABHU1VCAAABCAAAAH4AAADAImwmYE9TLzIAAAGIAAAAPwAAAGBKqH5SY21hcAAAAcgAAAD0AAACrukyyJBnbHlmAAACvAAAAF8AAACEIZpWH2hlYWQAAAMcAAAAJwAAADZfcj2zaGhlYQAAA0QAAAAYAAAAJAC5AHhobXR4AAADXAAAABAAAABMAZAAAGxvY2EAAANsAAAAFAAAACgCEgIybWF4cAAAA4AAAAAeAAAAIAEfABJuYW1lAAADoAAAASIAAAIK9SUU/XBvc3QAAATEAAAAZgAAAJCTcMc2eJxVjbEOgjAURU+hFRBK1dGRL+ALnAiToyMLEzFpnPz/eAshwSa97517c/MwwJmeB9kwPl+0cf5+uGPZXsqPu4nvZabcSZldZ6kfyWnomFY/eScKqZNWupKJO6kXN3K9uCVoL7iInPr1X5baXs3tjuMqCtzEuagm/AAlzQgPAAB4nGNgYRBlnMDAysDAYM/gBiT5oLQBAwuDJAMDEwMrMwNWEJDmmsJwgCFeXZghBcjlZMgFCzOiKOIFAB71Bb8AeJy1kjFuwkAQRZ+DwRAwBtNQRUGKQ8OdKCAWUhAgKLhIuAsVSpWz5Bbkj3dEgYiUIszqWdpZe+Z7/wB1oCYmIoboiwiLT2WjKl/jscrHfGg/pKdMkyklC5Zs2LEfHYpjcRoPzme9MWWmk3dWbK9ObkWkikOetJ554fWyoEsmdSlt+uR0pCJR34b6t/TVg1SY3sYvdf8vuiKrpyaDXDISiegp17p7579Gp3p++y7HPAiY9pmTibljrr85qSidtlg4+l25GLCaS8e6rRxNBmsnERunKbaOObRz7N72ju5vdAjYpBXHgJylOAVsMseDAPEP8LYoUHicY2BiAAEfhiAGJgZWBgZ7RnFRdnVJELCQlBSRlATJMoLV2DK4glSYs6ubq5vbKrJLSbGrgEmovDuDJVhe3VzcXFwNLCOILB/C4IuQ1xTn5FPilBTj5FPmBAB4WwoqAHicY2BkYGAA4sk1sR/j+W2+MnAzpDBgAyEMQUCSg4EJxAEAwUgFHgB4nGNgZGBgSGFggJMhDIwMqEAYAByHATJ4nGNgAIIUNEwmAABl3AGReJxjYAACIQYlBiMGJ3wQAEcQBEV4nGNgZGBgEGZgY2BiAAEQyQWEDAz/wXwGAAsPATIAAHicXdBNSsNAHAXwl35iA0UQXYnMShfS9GPZA7T7LgIu03SSpkwzYTIt1BN4Ak/gKTyAeCxfw39jZkjymzcvAwmAW/wgwHUEGDb36+jQQ3GXGot79L24jxCP4gHzF/EIr4jEIe7wxhOC3g2TMYy4Q7+Lu/SHuEd/ivt4wJd4wPxbPEKMX3GI5+DJFGaSn4qNzk8mcbKSR6xdXdhSzaOZJGtdapd4vVPbi6rP+cL7TGXOHtXKll4bY1Xl7EGnPtp7Xy2n00zyKLVHfkHBa4IcJ2oD3cgggWvt/V/FbDrUlEUJhTn/0azVWbNTNr0Ens8de1tceK9xZmfB1CPjOmPH4kitmvOubcNpmVTN3oFJyjzCvnmrwhJTzqzVj9jiSX911FjeAAB4nG3HMRKCMBBA0f0giiKi4DU8k0V2GWbIZDOh4PoWWvq6J5V8If9NVNQcaDhyouXMhY4rPTcG7jwYmXhKq8Wz+p762aNaeYXom2n3m2dLTVgsrCgFJ7OTmIkYbwIbC6vIB7WmFfAAAA==") format("woff");
}</style><style>
    :root { color-scheme: dark; }
    html, body { margin:0; height:100%; background:#0b0f14; overflow:hidden; }
    #hud {
      position:fixed; left:12px; top:12px; z-index:10;
      padding:8px 10px; border-radius:8px; font:12px/1.3 system-ui,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
      background:rgba(20,24,32,.6); backdrop-filter: blur(4px);
      color:#dce3ec; letter-spacing:.2px; user-select:none;
      box-shadow:0 6px 18px rgba(0,0,0,.35), inset 0 0 0 1px rgba(255,255,255,.06);
    }
    #hud b { color:#fff; font-weight:600 }
    canvas { display:block; }
    .lil-gui.root { --background-color: rgba(20,24,32,.72); --widget-color: rgba(255,255,255,.08); --text-color:#dce3ec; --title-background-color: rgba(20,24,32,.85); --hover-color: rgba(255,255,255,.14); }
  </style>

  <script type="importmap">
  {
    "imports": {
      "three": "https://unpkg.com/three@0.164.1/build/three.module.js",
      "three/addons/": "https://unpkg.com/three@0.164.1/examples/jsm/"
    }
  }
  </script>
<style type="text/css" id="operaUserStyle"></style></head>
<body class="">
  <div id="hud">
    <b>Procedural Geometry</b> — drag to orbit, wheel to zoom<br>
    <b>Space</b> play/pause • <b>R</b> random seed • <b>G</b> recenter &amp; regenerate @ mouse
  </div>

  <script type="module">
    import * as THREE from 'three';
    import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
    import GUI from 'https://cdn.jsdelivr.net/npm/lil-gui@0.19/+esm';

    // ---------- Renderer, Scene, Camera ----------
    const renderer = new THREE.WebGLRenderer({ antialias:true, alpha:false });
    renderer.setPixelRatio(Math.min(devicePixelRatio, 2));
    renderer.setSize(innerWidth, innerHeight);
    renderer.outputColorSpace = THREE.SRGBColorSpace;
    renderer.toneMapping = THREE.ACESFilmicToneMapping;
    document.body.appendChild(renderer.domElement);

    const scene = new THREE.Scene();
    scene.background = new THREE.Color('#0b0f14');

    const camera = new THREE.PerspectiveCamera(60, innerWidth/innerHeight, 0.1, 200);
    camera.position.set(16, 10, 16);

    const controls = new OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;
    controls.dampingFactor = 0.06;
    controls.target.set(0, 0, 0);

    // ---------- Parameters & Palettes ----------
    const palettes = {
      Terrain:  ['#2e8b57', '#d2b48c', '#ffffff'],
      Ocean:    ['#0b3d91', '#2a7abf', '#e3f6ff'],
      Lava:     ['#180012', '#ff3b00', '#ffd966'],
      Neon:     ['#311b92', '#00e5ff', '#ffea00']
    };

    const params = {
      shape: 'Plane',
      amp: 1.2,
      freq: 0.35,
      speed: 0.25,
      octaves: 5,
      lac: 2.0,
      gain: 0.5,
      contours: true,
      contourFreq: 24.0,
      contourThickness: 1.2,
      wireframe: false,
      animate: true,
      palette: 'Terrain',
      seed: (Math.random()*1000)|0,
      randomizeSeed(){
        params.seed = (Math.random()*1000)|0;
        uniforms.uSeed.value = params.seed;
      }
    };

    // ---------- Shaders ----------
    const vertexShader = /* glsl */`
      precision highp float;
      uniform float uTime, uAmp, uFreq, uSpeed, uSeed, uLac, uGain;
      uniform int uOctaves;
      uniform vec3 uCenter; // local-space center for noise
      varying float vHeight;

      // --- Ashima 3D simplex noise (public domain) ---
      vec3 mod289(vec3 x){ return x - floor(x * (1.0 / 289.0)) * 289.0; }
      vec4 mod289(vec4 x){ return x - floor(x * (1.0 / 289.0)) * 289.0; }
      vec4 permute(vec4 x){ return mod289(((x*34.0)+1.0)*x); }
      vec4 taylorInvSqrt(vec4 r){ return 1.79284291400159 - 0.85373472095314 * r; }

      float snoise(vec3 v){
        const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
        const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);
        vec3 i  = floor(v + dot(v, C.yyy) );
        vec3 x0 =   v - i + dot(i, C.xxx) ;
        vec3 g = step(x0.yzx, x0.xyz);
        vec3 l = 1.0 - g;
        vec3 i1 = min( g.xyz, l.zxy );
        vec3 i2 = max( g.xyz, l.zxy );
        vec3 x1 = x0 - i1 + C.xxx;
        vec3 x2 = x0 - i2 + C.yyy;
        vec3 x3 = x0 - vec3(0.5);
        i = mod289(i);
        vec4 p = permute( permute( permute(
                    i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
                  + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))
                  + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));
        float n_ = 0.142857142857;
        vec3  ns = n_ * D.wyz - D.xzx;
        vec4 j = p - 49.0 * floor(p * ns.z * ns.z);
        vec4 x_ = floor(j * ns.z);
        vec4 y_ = floor(j - 7.0 * x_ );
        vec4 x = x_ * ns.x + ns.y;
        vec4 y = y_ * ns.x + ns.y;
        vec4 h = 1.0 - abs(x) - abs(y);
        vec4 b0 = vec4( x.xy, y.xy );
        vec4 b1 = vec4( x.zw, y.zw );
        vec4 s0 = floor(b0)*2.0 + 1.0;
        vec4 s1 = floor(b1)*2.0 + 1.0;
        vec4 sh = -step(h, vec4(0.0));
        vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
        vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;
        vec3 p0 = vec3(a0.xy , h.x);
        vec3 p1 = vec3(a0.zw , h.y);
        vec3 p2 = vec3(a1.xy , h.z);
        vec3 p3 = vec3(a1.zw , h.w);
        vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2,p2), dot(p3,p3)));
        p0 *= norm.x; p1 *= norm.y; p2 *= norm.z; p3 *= norm.w;
        vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
        m = m * m;
        return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),
                                      dot(p2,x2), dot(p3,x3) ) );
      }

      float fbm(vec3 p){
        float sum = 0.0;
        float amp = 1.0;
        float f = 1.0;
        for (int i = 0; i < 8; i++) {
          if (i >= uOctaves) break;
          sum += amp * snoise(p * f);
          f *= uLac;
          amp *= uGain;
        }
        return sum;
      }

      void main() {
        // Shift sampling so that uCenter is the "origin" of the noise
        vec3 sp = (position - uCenter) * uFreq
                + vec3(uSeed, uSeed*1.31, uSeed*2.17)
                + uTime * uSpeed;

        float n = fbm(sp);
        float h = n * uAmp;

        vHeight = h;
        vec3 displaced = position + normal * h;
        gl_Position = projectionMatrix * modelViewMatrix * vec4(displaced, 1.0);
      }
    `;

    const fragmentShader = /* glsl */`
      precision highp float;
      varying float vHeight;
      uniform float uAmp;
      uniform bool uShowContours;
      uniform float uContourFreq;
      uniform float uContourThickness;
      uniform vec3 uLowColor, uMidColor, uHighColor;

      void main(){
        float t1 = smoothstep(-0.5*uAmp, 0.0, vHeight);
        float t2 = smoothstep(0.0,  0.6*uAmp, vHeight);
        vec3 col = mix(uLowColor, uMidColor, t1);
        col = mix(col, uHighColor, t2);

        if (uShowContours) {
          float v = vHeight * uContourFreq;
          float width = fwidth(v) * uContourThickness;
          float g = smoothstep(0.0, width, abs(fract(v) - 0.5));
          col = mix(vec3(0.06), col, g);
        }
        gl_FragColor = vec4(col, 1.0);
      }
    `;

    // ---------- Material & Uniforms ----------
    const uniforms = {
      uTime: { value: 0 },
      uAmp: { value: params.amp },
      uFreq: { value: params.freq },
      uSpeed: { value: params.speed },
      uSeed: { value: params.seed },
      uOctaves: { value: params.octaves },
      uLac: { value: params.lac },
      uGain: { value: params.gain },
      uShowContours: { value: params.contours },
      uContourFreq: { value: params.contourFreq },
      uContourThickness: { value: params.contourThickness },
      uLowColor:  { value: new THREE.Color() },
      uMidColor:  { value: new THREE.Color() },
      uHighColor: { value: new THREE.Color() },
      uCenter:    { value: new THREE.Vector3(0,0,0) } // <-- new
    };

    const material = new THREE.ShaderMaterial({
      uniforms,
      vertexShader,
      fragmentShader,
      wireframe: params.wireframe,
      side: THREE.DoubleSide,
      depthTest: true,
      extensions: { derivatives: true }
    });

    function setPalette(name){
      const [a,b,c] = palettes[name];
      uniforms.uLowColor.value.set(a);
      uniforms.uMidColor.value.set(b);
      uniforms.uHighColor.value.set(c);
    }
    setPalette(params.palette);

    // ---------- Geometry Builder ----------
    let mesh = null;

    function buildMesh() {
      if (mesh) {
        mesh.geometry.dispose();
        scene.remove(mesh);
        mesh = null;
      }

      let geometry;
      if (params.shape === 'Plane') {
        geometry = new THREE.PlaneGeometry(30, 30, 256, 256);
        geometry.rotateX(-Math.PI/2);
        camera.position.set(16, 10, 16);
        controls.target.set(0, 0, 0);
      } else if (params.shape === 'Sphere') {
        geometry = new THREE.SphereGeometry(8, 256, 128);
        camera.position.set(16, 10, 16);
        controls.target.set(0, 0, 0);
      } else { // TorusKnot
        geometry = new THREE.TorusKnotGeometry(6, 1.6, 640, 160);
        camera.position.set(16, 10, 16);
        controls.target.set(0, 0, 0);
      }

      mesh = new THREE.Mesh(geometry, material);
      scene.add(mesh);

      // Reset center for new shapes
      uniforms.uCenter.value.set(0,0,0);
    }
    buildMesh();

    // ---------- Raycast & Recenter ----------
    const raycaster = new THREE.Raycaster();
    const mouse = new THREE.Vector2();

    function updateMouseFromEvent(e){
      const rect = renderer.domElement.getBoundingClientRect();
      const x = (e.clientX - rect.left) / rect.width;
      const y = (e.clientY - rect.top) / rect.height;
      mouse.set(x*2-1, -(y*2-1));
    }

    function recenterAtMouse(){
      if (!mesh) return;
      raycaster.setFromCamera(mouse, camera);
      const hit = raycaster.intersectObject(mesh, false)[0];
      if (!hit) return;

      // Move noise center to the local-space point under the cursor
      const worldP = hit.point.clone();
      const localP = mesh.worldToLocal(worldP.clone());
      uniforms.uCenter.value.copy(localP);

      // Keep camera framing stable while shifting orbit center
      const prevTarget = controls.target.clone();
      controls.target.copy(worldP);
      const delta = controls.target.clone().sub(prevTarget);
      camera.position.add(delta);

      // Regenerate features
      params.randomizeSeed();
    }

    // ---------- GUI ----------
    const gui = new GUI({ width: 320, title: 'Procedural Controls' });
    gui.add(params, 'shape', ['Plane','Sphere','TorusKnot']).onChange(buildMesh);
    gui.add(params, 'palette', Object.keys(palettes)).onChange(setPalette);
    gui.add(params, 'wireframe').onChange(v => material.wireframe = v);
    gui.add(params, 'animate').name('animate (Space)');
    gui.add(params, 'randomizeSeed').name('Randomize Seed (R)');
    gui.add({ recenterAtMouse }, 'recenterAtMouse').name('Recenter @ Mouse (G)');

    const fNoise = gui.addFolder('Noise');
    fNoise.add(params, 'amp', 0.0, 4.0, 0.01).onChange(v => uniforms.uAmp.value = v);
    fNoise.add(params, 'freq', 0.01, 2.0, 0.01).onChange(v => uniforms.uFreq.value = v);
    fNoise.add(params, 'speed', 0.0, 2.0, 0.01).onChange(v => uniforms.uSpeed.value = v);
    fNoise.add(params, 'octaves', 1, 8, 1).onChange(v => uniforms.uOctaves.value = v);
    fNoise.add(params, 'lac', 1.5, 3.5, 0.01).onChange(v => uniforms.uLac.value = v);
    fNoise.add(params, 'gain', 0.1, 0.9, 0.01).onChange(v => uniforms.uGain.value = v);

    const fContours = gui.addFolder('Contours');
    fContours.add(params, 'contours').name('show contours')
      .onChange(v => uniforms.uShowContours.value = v);
    fContours.add(params, 'contourFreq', 2, 60, 0.1)
      .onChange(v => uniforms.uContourFreq.value = v);
    fContours.add(params, 'contourThickness', 0.5, 3.0, 0.01)
      .onChange(v => uniforms.uContourThickness.value = v);

    // ---------- Interaction ----------
    window.addEventListener('resize', () => {
      renderer.setSize(innerWidth, innerHeight);
      camera.aspect = innerWidth / innerHeight;
      camera.updateProjectionMatrix();
    });
    window.addEventListener('pointermove', (e)=>{ updateMouseFromEvent(e); });
    window.addEventListener('pointerdown', (e)=>{ updateMouseFromEvent(e); }); // keep coords fresh
    window.addEventListener('keydown', (e) => {
      if (e.code === 'Space') { params.animate = !params.animate; }
      const k = e.key.toLowerCase();
      if (k === 'r') { params.randomizeSeed(); }
      if (k === 'g') { recenterAtMouse(); }
    });

    // ---------- Loop ----------
    const clock = new THREE.Clock();
    function tick() {
      const dt = clock.getDelta();
      if (params.animate) uniforms.uTime.value += dt;
      controls.update();
      renderer.render(scene, camera);
      requestAnimationFrame(tick);
    }
    tick();
  </script>


<canvas data-engine="three.js r164" width="1887" height="861" style="display: block; width: 1258px; height: 574px; touch-action: none;"></canvas><div class="lil-gui root allow-touch-styles autoPlace" style="--width: 320px;"><div class="title" role="button" aria-expanded="true" tabindex="0">Procedural Controls</div><div class="children"><div class="controller option"><div class="name" id="lil-gui-name-1">shape</div><div class="widget"><select aria-labelledby="lil-gui-name-1"><option>Plane</option><option>Sphere</option><option>TorusKnot</option></select><div class="display">TorusKnot</div></div></div><div class="controller option"><div class="name" id="lil-gui-name-2">palette</div><div class="widget"><select aria-labelledby="lil-gui-name-2"><option>Terrain</option><option>Ocean</option><option>Lava</option><option>Neon</option></select><div class="display">Ocean</div></div></div><label class="controller boolean"><div class="name" id="lil-gui-name-3">wireframe</div><div class="widget"><input type="checkbox" aria-labelledby="lil-gui-name-3"></div></label><label class="controller boolean"><div class="name" id="lil-gui-name-4">animate (Space)</div><div class="widget"><input type="checkbox" aria-labelledby="lil-gui-name-4"></div></label><div class="controller function"><div class="widget"><button><div class="name" id="lil-gui-name-5">Randomize Seed (R)</div></button></div></div><div class="controller function"><div class="widget"><button><div class="name" id="lil-gui-name-6">Recenter @ Mouse (G)</div></button></div></div><div class="lil-gui"><div class="title" role="button" aria-expanded="true" tabindex="0">Noise</div><div class="children"><div class="controller number hasSlider"><div class="name" id="lil-gui-name-7">amp</div><div class="widget"><div class="slider"><div class="fill" style="width: 1.25%;"></div></div><input type="text" aria-labelledby="lil-gui-name-7"></div></div><div class="controller number hasSlider"><div class="name" id="lil-gui-name-8">freq</div><div class="widget"><div class="slider"><div class="fill" style="width: 0%;"></div></div><input type="text" aria-labelledby="lil-gui-name-8"></div></div><div class="controller number hasSlider"><div class="name" id="lil-gui-name-9">speed</div><div class="widget"><div class="slider"><div class="fill" style="width: 8.5%;"></div></div><input type="text" aria-labelledby="lil-gui-name-9"></div></div><div class="controller number hasSlider"><div class="name" id="lil-gui-name-10">octaves</div><div class="widget"><div class="slider"><div class="fill" style="width: 42.8571%;"></div></div><input type="text" aria-labelledby="lil-gui-name-10"></div></div><div class="controller number hasSlider"><div class="name" id="lil-gui-name-11">lac</div><div class="widget"><div class="slider"><div class="fill" style="width: 65.5%;"></div></div><input type="text" aria-labelledby="lil-gui-name-11"></div></div><div class="controller number hasSlider"><div class="name" id="lil-gui-name-12">gain</div><div class="widget"><div class="slider"><div class="fill" style="width: 100%;"></div></div><input type="text" aria-labelledby="lil-gui-name-12"></div></div></div></div><div class="lil-gui"><div class="title" role="button" aria-expanded="true" tabindex="0">Contours</div><div class="children"><label class="controller boolean"><div class="name" id="lil-gui-name-13">show contours</div><div class="widget"><input type="checkbox" aria-labelledby="lil-gui-name-13"></div></label><div class="controller number hasSlider"><div class="name" id="lil-gui-name-14">contourFreq</div><div class="widget"><div class="slider"><div class="fill" style="width: 0%;"></div></div><input type="text" aria-labelledby="lil-gui-name-14"></div></div><div class="controller number hasSlider"><div class="name" id="lil-gui-name-15">contourThickness</div><div class="widget"><div class="slider"><div class="fill" style="width: 100%;"></div></div><input type="text" aria-labelledby="lil-gui-name-15"></div></div></div></div></div></div></body></html>